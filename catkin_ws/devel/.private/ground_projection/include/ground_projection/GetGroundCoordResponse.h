// Generated by gencpp from file ground_projection/GetGroundCoordResponse.msg
// DO NOT EDIT!


#ifndef GROUND_PROJECTION_MESSAGE_GETGROUNDCOORDRESPONSE_H
#define GROUND_PROJECTION_MESSAGE_GETGROUNDCOORDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ground_projection
{
template <class ContainerAllocator>
struct GetGroundCoordResponse_
{
  typedef GetGroundCoordResponse_<ContainerAllocator> Type;

  GetGroundCoordResponse_()
    : gp()  {
    }
  GetGroundCoordResponse_(const ContainerAllocator& _alloc)
    : gp(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _gp_type;
  _gp_type gp;





  typedef boost::shared_ptr< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGroundCoordResponse_

typedef ::ground_projection::GetGroundCoordResponse_<std::allocator<void> > GetGroundCoordResponse;

typedef boost::shared_ptr< ::ground_projection::GetGroundCoordResponse > GetGroundCoordResponsePtr;
typedef boost::shared_ptr< ::ground_projection::GetGroundCoordResponse const> GetGroundCoordResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator1> & lhs, const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator2> & rhs)
{
  return lhs.gp == rhs.gp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator1> & lhs, const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ground_projection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cb06b1906fc6f1f5910a7d2012f835c0";
  }

  static const char* value(const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcb06b1906fc6f1f5ULL;
  static const uint64_t static_value2 = 0x910a7d2012f835c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ground_projection/GetGroundCoordResponse";
  }

  static const char* value(const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"geometry_msgs/Point gp\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGroundCoordResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ground_projection::GetGroundCoordResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ground_projection::GetGroundCoordResponse_<ContainerAllocator>& v)
  {
    s << indent << "gp: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.gp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GROUND_PROJECTION_MESSAGE_GETGROUNDCOORDRESPONSE_H
