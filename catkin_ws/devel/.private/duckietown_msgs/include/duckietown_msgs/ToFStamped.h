// Generated by gencpp from file duckietown_msgs/ToFStamped.msg
// DO NOT EDIT!


#ifndef DUCKIETOWN_MSGS_MESSAGE_TOFSTAMPED_H
#define DUCKIETOWN_MSGS_MESSAGE_TOFSTAMPED_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace duckietown_msgs
{
template <class ContainerAllocator>
struct ToFStamped_
{
  typedef ToFStamped_<ContainerAllocator> Type;

  ToFStamped_()
    : header()
    , error(0)
    , distance(0)
    , confidence(0)  {
    }
  ToFStamped_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , error(0)
    , distance(0)
    , confidence(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int8_t _error_type;
  _error_type error;

   typedef int16_t _distance_type;
  _distance_type distance;

   typedef int16_t _confidence_type;
  _confidence_type confidence;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NO_ERROR)
  #undef NO_ERROR
#endif
#if defined(_WIN32) && defined(ERROR_NEAR)
  #undef ERROR_NEAR
#endif
#if defined(_WIN32) && defined(ERROR_FAR)
  #undef ERROR_FAR
#endif
#if defined(_WIN32) && defined(ERROR_OTHER)
  #undef ERROR_OTHER
#endif

  enum {
    NO_ERROR = 0,
    ERROR_NEAR = 1,
    ERROR_FAR = 2,
    ERROR_OTHER = 3,
  };


  typedef boost::shared_ptr< ::duckietown_msgs::ToFStamped_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::duckietown_msgs::ToFStamped_<ContainerAllocator> const> ConstPtr;

}; // struct ToFStamped_

typedef ::duckietown_msgs::ToFStamped_<std::allocator<void> > ToFStamped;

typedef boost::shared_ptr< ::duckietown_msgs::ToFStamped > ToFStampedPtr;
typedef boost::shared_ptr< ::duckietown_msgs::ToFStamped const> ToFStampedConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::duckietown_msgs::ToFStamped_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::duckietown_msgs::ToFStamped_<ContainerAllocator1> & lhs, const ::duckietown_msgs::ToFStamped_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.error == rhs.error &&
    lhs.distance == rhs.distance &&
    lhs.confidence == rhs.confidence;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::duckietown_msgs::ToFStamped_<ContainerAllocator1> & lhs, const ::duckietown_msgs::ToFStamped_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace duckietown_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::duckietown_msgs::ToFStamped_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::duckietown_msgs::ToFStamped_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::duckietown_msgs::ToFStamped_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "803258046ff4b4331a4d8f4f3f180cc9";
  }

  static const char* value(const ::duckietown_msgs::ToFStamped_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x803258046ff4b433ULL;
  static const uint64_t static_value2 = 0x1a4d8f4f3f180cc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "duckietown_msgs/ToFStamped";
  }

  static const char* value(const ::duckietown_msgs::ToFStamped_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# There is no error. `distance` is valid.\n"
"int8 NO_ERROR = 0\n"
"# Target is too close to the sensor\n"
"int8 ERROR_NEAR = 1\n"
"# Target is too far from the sensor (> 2047mm)\n"
"int8 ERROR_FAR = 2\n"
"# Other general error\n"
"int8 ERROR_OTHER = 3\n"
"\n"
"int8 error       # One of NO_ERROR, ERROR_NEAR, ERROR_FAR, or ERROR_OTHER\n"
"int16 distance   # Distance in mm. Only valid if error == NO_ERROR\n"
"int16 confidence # An abstract \"confidence\" measurement that is not well-defined in the RFD77402 datasheet\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::duckietown_msgs::ToFStamped_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.error);
      stream.next(m.distance);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ToFStamped_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::duckietown_msgs::ToFStamped_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::duckietown_msgs::ToFStamped_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "error: ";
    Printer<int8_t>::stream(s, indent + "  ", v.error);
    s << indent << "distance: ";
    Printer<int16_t>::stream(s, indent + "  ", v.distance);
    s << indent << "confidence: ";
    Printer<int16_t>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DUCKIETOWN_MSGS_MESSAGE_TOFSTAMPED_H
